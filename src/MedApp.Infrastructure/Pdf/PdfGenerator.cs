using MedApp.Application.DTOs;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;

namespace MedApp.Infrastructure.Pdf;

public static class PdfGenerator
{
    static PdfGenerator()
    {
        QuestPDF.Settings.License = LicenseType.Community;
    }
    public static byte[] Build(AppointmentDto a)
    {
        var doc = Document.Create(container =>
        {
            container.Page(page =>
            {
                page.Margin(30);
                page.Size(PageSizes.A4);
                page.PageColor(Colors.White);
                page.DefaultTextStyle(x => x.FontSize(11));

                page.Header()
                    .Text("Prescription Report").SemiBold().FontSize(20).AlignCenter();

                page.Content().Column(col =>
                {
                    col.Spacing(10);

                    col.Item().Text($"Patient: {a.Patient}");
                    col.Item().Text($"Doctor: {a.Doctor}");
                    col.Item().Text($"Date: {a.AppointmentDate:dd-MMM-yyyy}");
                    col.Item().Text($"Visit Type: {a.VisitType}");
                    if (!string.IsNullOrWhiteSpace(a.Diagnosis))
                        col.Item().Text($"Diagnosis: {a.Diagnosis}");
                    if (!string.IsNullOrWhiteSpace(a.Notes))
                        col.Item().Text($"Notes: {a.Notes}");

                    //col.Item().Text("Prescriptions").SemiBold().FontSize(14).PaddingTop(10);
                    col.Item().Element(e => e.PaddingTop(10)).Text("Prescriptions").SemiBold().FontSize(14);


                    col.Item().Table(table =>
                    {
                        table.ColumnsDefinition(c =>
                        {
                            c.ConstantColumn(140);
                            c.RelativeColumn();
                            c.ConstantColumn(80);
                            c.ConstantColumn(80);
                            c.RelativeColumn();
                        });

                        table.Header(h =>
                        {
                            h.Cell().Element(CellStyle).Text("Medicine");
                            h.Cell().Element(CellStyle).Text("Dosage");
                            h.Cell().Element(CellStyle).Text("Start Date");
                            h.Cell().Element(CellStyle).Text("End Date");
                            h.Cell().Element(CellStyle).Text("Notes");

                            static IContainer CellStyle(IContainer container) => container
                                .DefaultTextStyle(x => x.SemiBold())
                                .Padding(4)
                                .Background(Colors.Grey.Lighten3);
                        });

                        foreach (var d in a.Details)
                        {
                            table.Cell().Element(Cell).Text(d.MedicineName);
                            table.Cell().Element(Cell).Text(d.Dosage);
                            table.Cell().Element(Cell).Text(d.StartDate.ToString("dd-MMM-yyyy"));
                            table.Cell().Element(Cell).Text(d.EndDate?.ToString("dd-MMM-yyyy") ?? "");
                            table.Cell().Element(Cell).Text(d.Notes ?? "");

                            static IContainer Cell(IContainer container) => container.Padding(4);
                        }
                    });
                });

                page.Footer()
                    .AlignCenter()
                    .Text(x => x.Span("Generated by MedApp").FontColor(Colors.Grey.Medium));
            });
        });

        return doc.GeneratePdf();
    }
}
